trigger:
  branches:
    include:
      - main

pool:
  name: Test

variables:
  appName: 'lab003'
  packagePath: '$(System.DefaultWorkingDirectory)/build'
  resourceGroupName: 'RG-APP-SERVICE'

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  - script: |
      npm install
      npm run build
    displayName: 'Install dependencies and build React app'

  - script: |
      echo "Listing working directory contents..."
      ls -R $(System.DefaultWorkingDirectory)
    displayName: 'Debug: List working directory contents'

  - script: |
      echo "Listing node_modules contents..."
      ls -R node_modules || echo "node_modules not found"
    displayName: 'Debug: List node_modules contents'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(packagePath)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(appName).zip'
      replaceExistingArchive: true
    displayName: 'Archive build output'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
    displayName: 'Publish build artifacts'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Pay-As-You-Go'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Checking and adding access restriction rules for AzureDevOps..."

        main_rule=$(az webapp config access-restriction show \
          --name "$appName" \
          --resource-group "$resourceGroupName" \
          --query "[?name=='AllowAzureDevOps'] | length(@)" \
          --output tsv)
        main_rule=${main_rule:-0}

        if [ "$main_rule" -eq 0 ]; then
          echo "Adding AzureDevOps access restriction rule to main site..."
          az webapp config access-restriction add \
            --resource-group "$resourceGroupName" \
            --name "$appName" \
            --rule-name "AllowAzureDevOps" \
            --priority 100 \
            --action Allow \
            --service-tag AzureDevOps
        else
          echo "Access restriction rule 'AllowAzureDevOps' already exists on main site. Skipping."
        fi

        scm_rule=$(az webapp config access-restriction show \
          --name "$appName" \
          --resource-group "$resourceGroupName" \
          --slot scm \
          --query "[?name=='AllowAzureDevOpsSCM'] | length(@)" \
          --output tsv)
        scm_rule=${scm_rule:-0}

        if [ "$scm_rule" -eq 0 ]; then
          echo "Adding AzureDevOps access restriction rule to SCM site..."
          az webapp config access-restriction add \
            --resource-group "$resourceGroupName" \
            --name "$appName" \
            --rule-name "AllowAzureDevOpsSCM" \
            --priority 101 \
            --action Allow \
            --service-tag AzureDevOps \
            --scm-site true
        else
          echo "Access restriction rule 'AllowAzureDevOpsSCM' already exists on SCM site. Skipping."
        fi
    displayName: 'Ensure Azure DevOps IPs Can Access App Service and SCM'

  - script: sleep 10
    displayName: 'Wait for access restriction to apply'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Pay-As-You-Go'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Verifying access restriction rules..."
        az webapp config access-restriction show \
          --name "$appName" \
          --resource-group "$resourceGroupName"
    displayName: 'Verify Azure DevOps Access Restriction Rules'

  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'Pay-As-You-Go'
      appType: 'webApp'
      appName: '$(appName)'
      package: '$(Build.ArtifactStagingDirectory)/$(appName).zip'
      deploymentMethod: 'zipDeploy'
    displayName: 'Deploy to Azure Web App using Zip Deploy'
